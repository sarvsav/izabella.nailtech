---
import Layout from "~/layouts/Layout.astro";
import Section from "~/components/Section.astro";
import Container from "~/components/Container.astro";
import Heading from "~/components/Heading.astro";
import CardCat from "~/components/CardCat.astro";
import { getCollection } from "astro:content";

const cats = await getCollection("cats");
---

<Layout>
	<Section class:list={"background-pattern"}>
		<Container>
			<Heading>
				<h1 slot="heading-title">All Our Cats</h1>
				<p slot="heading-content">
					We have a variety of cats available for adoption. Please take a look at our available cats and
					contact us if you are interested in adopting one. We are always looking for loving homes for our
					cats. Thank you for considering adoption!
				</p>
			</Heading>

			<div
				id="cat-filter-wrapper"
				class="my-8 flex flex-wrap gap-x-8 gap-y-4 items-center justify-center bg-gradient-to-r from-fuchsia-100 to-teal-100 p-4 rounded-2xl"
			>
				<div>
					<label for="gender">Gender</label>
					<select
						name="gender"
						id="gender"
						class="bg-transparent rounded-full ring-1 px-2 py-1 ring-teal-500 mt-2"
					>
						<option value="all" class="text-black">All</option>
						<option value="male">Male</option>
						<option value="female">Female</option>
					</select>
				</div>

				<div>
					<label for="breed">Breed</label>
					<select
						name="breed"
						id="breed"
						class="bg-transparent rounded-full ring-1 px-2 py-1 ring-teal-500 mt-2"
					>
						<option value="all">All</option>
					</select>
				</div>

				<div>
					<label for="child-friendly">Child Friendly</label>
					<select
						name="child-friendly"
						id="child-friendly"
						class="bg-transparent rounded-full ring-1 px-2 py-1 ring-teal-500 mt-2"
					>
						<option value="all">All</option>
					</select>
				</div>

				<div>
					<label for="sterilized">Sterilized</label>
					<select
						name="sterilized"
						id="sterilized"
						class="bg-transparent rounded-full ring-1 px-2 py-1 ring-teal-500 mt-2"
					>
						<option value="all">All</option>
					</select>
				</div>
			</div>
			<ul class="grid grid-cols-1 lg:grid-cols-3 gap-8 lg:gap-16 xl:gap-24">
				{cats.map((cat) => <CardCat cat={cat} />)}
			</ul>
		</Container>
	</Section>
</Layout>

<script>
	document.addEventListener("astro:page-load", () => {
		const catFilterWrapper = document.getElementById("cat-filter-wrapper")!;

		if (catFilterWrapper) {
			const catCards = document.querySelectorAll("[data-cat]")!;
			const genderFilter = document.getElementById("gender")!;
			const breedFilter = document.getElementById("breed")!;
			const childFriendlyFilter = document.getElementById("child-friendly")!;
			const sterilizedFilter = document.getElementById("sterilized")!;

			const catsData = Array.from(catCards).map((card, index) => {
				const dataCat = card.getAttribute("data-cat");
				return { index, show: true, ...(dataCat ? JSON.parse(dataCat) : {}) };
			});

			const updateFilters = () => {
				const selectedGender = genderFilter ? (genderFilter as HTMLSelectElement).value : "all";
				const selectedBreed = breedFilter ? (breedFilter as HTMLSelectElement).value : "all";
				const selectedChildFriendly = childFriendlyFilter
					? (childFriendlyFilter as HTMLSelectElement).value
					: "all";
				const selectedSterilized = sterilizedFilter ? (sterilizedFilter as HTMLSelectElement).value : "all";

				catsData.forEach((cat) => {
					cat.show =
						(selectedGender === "all" || cat.gender === selectedGender) &&
						(selectedBreed === "all" || cat.breed === selectedBreed) &&
						(selectedChildFriendly === "all" || cat.childFriendly.toString() === selectedChildFriendly) &&
						(selectedSterilized === "all" || cat.sterilized.toString() === selectedSterilized);
				});

				catCards.forEach((card, index) => {
					if (catsData[index].show) {
						card.classList.remove("hidden");
					} else {
						card.classList.add("hidden");
					}
				});

				updateOptions();
			};

			const updateOptions = () => {
				const visibleCats = catsData.filter((cat) => cat.show);

				const breeds = new Set(visibleCats.map((cat) => cat.breed));
				const selectedBreed = (breedFilter as HTMLSelectElement).value;
				breedFilter.innerHTML = '<option value="all">All</option>';
				breeds.forEach((breed) => {
					const option = document.createElement("option");
					option.value = breed;
					option.textContent = breed;
					breedFilter.appendChild(option);
				});
				(breedFilter as HTMLSelectElement).value = selectedBreed;

				const childFriendlyOptions = new Set(visibleCats.map((cat) => cat.childFriendly.toString()));
				const selectedChildFriendly = (childFriendlyFilter as HTMLSelectElement).value;
				childFriendlyFilter.innerHTML = '<option value="all">All</option>';
				childFriendlyOptions.forEach((optionValue) => {
					const option = document.createElement("option");
					option.value = optionValue;
					option.textContent = optionValue === "true" ? "Yes" : "No";
					childFriendlyFilter.appendChild(option);
				});
				(childFriendlyFilter as HTMLSelectElement).value = selectedChildFriendly;

				const sterilizedOptions = new Set(visibleCats.map((cat) => cat.sterilized.toString()));
				const selectedSterilized = (sterilizedFilter as HTMLSelectElement).value;
				sterilizedFilter.innerHTML = '<option value="all">All</option>';
				sterilizedOptions.forEach((optionValue) => {
					const option = document.createElement("option");
					option.value = optionValue;
					option.textContent = optionValue === "true" ? "Yes" : "No";
					sterilizedFilter.appendChild(option);
				});
				(sterilizedFilter as HTMLSelectElement).value = selectedSterilized;
			};

			genderFilter.addEventListener("change", updateFilters);
			breedFilter.addEventListener("change", updateFilters);
			childFriendlyFilter.addEventListener("change", updateFilters);
			sterilizedFilter.addEventListener("change", updateFilters);

			updateOptions();
		}
	});
</script>
